services:
  testDB:
    container_name: postgres_test_container
    image: postgres
    restart: always
    env_file:
      - .env.dev
    environment:
      POSTGRES_USER: ${TEST_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${TEST_DATABASE_PASSWORD}
      POSTGRES_DB: ${TEST_DATABASE_NAME}
    ports:
      - '5433:5432' # Maps host port 5433 to container port 5432
    volumes:
      - ./vol_test:/db/test # Separate volume for test database
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '-U',
          '${DATABASE_USERNAME}',
          '-d',
          '${TEST_DATABASE_NAME}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_cache:
    container_name: redis_cache_container
    image: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  redis_core:
    container_name: redis_core_container
    image: redis
    restart: always
    ports:
      - '6380:6379'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  meilisearch:
    container_name: meilisearch_container
    restart: always
    image: getmeili/meilisearch:v1.10.0
    env_file:
      - .env.dev
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
    ports:
      - '7700:7700'
    volumes:
      - ./meilisearch_data.ms:/data.ms
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7700/health']
      interval: 10s
      timeout: 5s
      retries: 5

  ticketBottle_api_dev:
    container_name: ticketbottle_api_dev
    image: ticketbottle_api_dev:latest
    build:
      context: .
      target: development
    command: npm run start:dev
    ports:
      - ${PORT}:${PORT}
    depends_on:
      testDB:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
      redis_core:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    volumes:
      - ./:/usr/src/app
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
